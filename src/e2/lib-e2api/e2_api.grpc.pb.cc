// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: e2_api.proto

#include "e2_api.pb.h"
#include "e2_api.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace E2 {

static const char* E2_method_names[] = {
  "/E2.E2/addElement",
};

std::unique_ptr< E2::Stub> E2::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< E2::Stub> stub(new E2::Stub(channel));
  return stub;
}

E2::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_addElement_(E2_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status E2::Stub::addElement(::grpc::ClientContext* context, const ::E2::ConfigurationRequest& request, ::E2::ConfigurationReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_addElement_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::E2::ConfigurationReply>* E2::Stub::AsyncaddElementRaw(::grpc::ClientContext* context, const ::E2::ConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::E2::ConfigurationReply>(channel_.get(), cq, rpcmethod_addElement_, context, request);
}

E2::AsyncService::AsyncService() : ::grpc::AsynchronousService(E2_method_names, 1) {}

E2::Service::~Service() {
  delete service_;
}

::grpc::Status E2::Service::addElement(::grpc::ServerContext* context, const ::E2::ConfigurationRequest* request, ::E2::ConfigurationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void E2::AsyncService::RequestaddElement(::grpc::ServerContext* context, ::E2::ConfigurationRequest* request, ::grpc::ServerAsyncResponseWriter< ::E2::ConfigurationReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* E2::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      E2_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< E2::Service, ::E2::ConfigurationRequest, ::E2::ConfigurationReply>(
          std::mem_fn(&E2::Service::addElement), this)));
  return service_;
}


}  // namespace E2

