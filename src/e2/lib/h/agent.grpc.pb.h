// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: agent.proto
#ifndef GRPC_agent_2eproto__INCLUDED
#define GRPC_agent_2eproto__INCLUDED

#include "agent.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace Telemetry {

class OpenConfigTelemetry GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Telemetry::OpenConfigData>> telemetrySubscribe(::grpc::ClientContext* context, const ::Telemetry::SubscriptionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Telemetry::OpenConfigData>>(telemetrySubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Telemetry::OpenConfigData>> AsynctelemetrySubscribe(::grpc::ClientContext* context, const ::Telemetry::SubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Telemetry::OpenConfigData>>(AsynctelemetrySubscribeRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status cancelTelemetrySubscription(::grpc::ClientContext* context, const ::Telemetry::CancelSubscriptionRequest& request, ::Telemetry::CancelSubscriptionReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Telemetry::CancelSubscriptionReply>> AsynccancelTelemetrySubscription(::grpc::ClientContext* context, const ::Telemetry::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Telemetry::CancelSubscriptionReply>>(AsynccancelTelemetrySubscriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status getTelemetrySubscriptions(::grpc::ClientContext* context, const ::Telemetry::GetSubscriptionsRequest& request, ::Telemetry::GetSubscriptionsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Telemetry::GetSubscriptionsReply>> AsyncgetTelemetrySubscriptions(::grpc::ClientContext* context, const ::Telemetry::GetSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Telemetry::GetSubscriptionsReply>>(AsyncgetTelemetrySubscriptionsRaw(context, request, cq));
    }
    virtual ::grpc::Status getTelemetryOperationalState(::grpc::ClientContext* context, const ::Telemetry::GetOperationalStateRequest& request, ::Telemetry::GetOperationalStateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Telemetry::GetOperationalStateReply>> AsyncgetTelemetryOperationalState(::grpc::ClientContext* context, const ::Telemetry::GetOperationalStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Telemetry::GetOperationalStateReply>>(AsyncgetTelemetryOperationalStateRaw(context, request, cq));
    }
    virtual ::grpc::Status getDataEncodings(::grpc::ClientContext* context, const ::Telemetry::DataEncodingRequest& request, ::Telemetry::DataEncodingReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Telemetry::DataEncodingReply>> AsyncgetDataEncodings(::grpc::ClientContext* context, const ::Telemetry::DataEncodingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Telemetry::DataEncodingReply>>(AsyncgetDataEncodingsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::Telemetry::OpenConfigData>* telemetrySubscribeRaw(::grpc::ClientContext* context, const ::Telemetry::SubscriptionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Telemetry::OpenConfigData>* AsynctelemetrySubscribeRaw(::grpc::ClientContext* context, const ::Telemetry::SubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Telemetry::CancelSubscriptionReply>* AsynccancelTelemetrySubscriptionRaw(::grpc::ClientContext* context, const ::Telemetry::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Telemetry::GetSubscriptionsReply>* AsyncgetTelemetrySubscriptionsRaw(::grpc::ClientContext* context, const ::Telemetry::GetSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Telemetry::GetOperationalStateReply>* AsyncgetTelemetryOperationalStateRaw(::grpc::ClientContext* context, const ::Telemetry::GetOperationalStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Telemetry::DataEncodingReply>* AsyncgetDataEncodingsRaw(::grpc::ClientContext* context, const ::Telemetry::DataEncodingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::Telemetry::OpenConfigData>> telemetrySubscribe(::grpc::ClientContext* context, const ::Telemetry::SubscriptionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Telemetry::OpenConfigData>>(telemetrySubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Telemetry::OpenConfigData>> AsynctelemetrySubscribe(::grpc::ClientContext* context, const ::Telemetry::SubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Telemetry::OpenConfigData>>(AsynctelemetrySubscribeRaw(context, request, cq, tag));
    }
    ::grpc::Status cancelTelemetrySubscription(::grpc::ClientContext* context, const ::Telemetry::CancelSubscriptionRequest& request, ::Telemetry::CancelSubscriptionReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Telemetry::CancelSubscriptionReply>> AsynccancelTelemetrySubscription(::grpc::ClientContext* context, const ::Telemetry::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Telemetry::CancelSubscriptionReply>>(AsynccancelTelemetrySubscriptionRaw(context, request, cq));
    }
    ::grpc::Status getTelemetrySubscriptions(::grpc::ClientContext* context, const ::Telemetry::GetSubscriptionsRequest& request, ::Telemetry::GetSubscriptionsReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Telemetry::GetSubscriptionsReply>> AsyncgetTelemetrySubscriptions(::grpc::ClientContext* context, const ::Telemetry::GetSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Telemetry::GetSubscriptionsReply>>(AsyncgetTelemetrySubscriptionsRaw(context, request, cq));
    }
    ::grpc::Status getTelemetryOperationalState(::grpc::ClientContext* context, const ::Telemetry::GetOperationalStateRequest& request, ::Telemetry::GetOperationalStateReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Telemetry::GetOperationalStateReply>> AsyncgetTelemetryOperationalState(::grpc::ClientContext* context, const ::Telemetry::GetOperationalStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Telemetry::GetOperationalStateReply>>(AsyncgetTelemetryOperationalStateRaw(context, request, cq));
    }
    ::grpc::Status getDataEncodings(::grpc::ClientContext* context, const ::Telemetry::DataEncodingRequest& request, ::Telemetry::DataEncodingReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Telemetry::DataEncodingReply>> AsyncgetDataEncodings(::grpc::ClientContext* context, const ::Telemetry::DataEncodingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Telemetry::DataEncodingReply>>(AsyncgetDataEncodingsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientReader< ::Telemetry::OpenConfigData>* telemetrySubscribeRaw(::grpc::ClientContext* context, const ::Telemetry::SubscriptionRequest& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::Telemetry::OpenConfigData>* AsynctelemetrySubscribeRaw(::grpc::ClientContext* context, const ::Telemetry::SubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::Telemetry::CancelSubscriptionReply>* AsynccancelTelemetrySubscriptionRaw(::grpc::ClientContext* context, const ::Telemetry::CancelSubscriptionRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::Telemetry::GetSubscriptionsReply>* AsyncgetTelemetrySubscriptionsRaw(::grpc::ClientContext* context, const ::Telemetry::GetSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::Telemetry::GetOperationalStateReply>* AsyncgetTelemetryOperationalStateRaw(::grpc::ClientContext* context, const ::Telemetry::GetOperationalStateRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::Telemetry::DataEncodingReply>* AsyncgetDataEncodingsRaw(::grpc::ClientContext* context, const ::Telemetry::DataEncodingRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_telemetrySubscribe_;
    const ::grpc::RpcMethod rpcmethod_cancelTelemetrySubscription_;
    const ::grpc::RpcMethod rpcmethod_getTelemetrySubscriptions_;
    const ::grpc::RpcMethod rpcmethod_getTelemetryOperationalState_;
    const ::grpc::RpcMethod rpcmethod_getDataEncodings_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status telemetrySubscribe(::grpc::ServerContext* context, const ::Telemetry::SubscriptionRequest* request, ::grpc::ServerWriter< ::Telemetry::OpenConfigData>* writer);
    virtual ::grpc::Status cancelTelemetrySubscription(::grpc::ServerContext* context, const ::Telemetry::CancelSubscriptionRequest* request, ::Telemetry::CancelSubscriptionReply* response);
    virtual ::grpc::Status getTelemetrySubscriptions(::grpc::ServerContext* context, const ::Telemetry::GetSubscriptionsRequest* request, ::Telemetry::GetSubscriptionsReply* response);
    virtual ::grpc::Status getTelemetryOperationalState(::grpc::ServerContext* context, const ::Telemetry::GetOperationalStateRequest* request, ::Telemetry::GetOperationalStateReply* response);
    virtual ::grpc::Status getDataEncodings(::grpc::ServerContext* context, const ::Telemetry::DataEncodingRequest* request, ::Telemetry::DataEncodingReply* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequesttelemetrySubscribe(::grpc::ServerContext* context, ::Telemetry::SubscriptionRequest* request, ::grpc::ServerAsyncWriter< ::Telemetry::OpenConfigData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestcancelTelemetrySubscription(::grpc::ServerContext* context, ::Telemetry::CancelSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::Telemetry::CancelSubscriptionReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestgetTelemetrySubscriptions(::grpc::ServerContext* context, ::Telemetry::GetSubscriptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::Telemetry::GetSubscriptionsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestgetTelemetryOperationalState(::grpc::ServerContext* context, ::Telemetry::GetOperationalStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::Telemetry::GetOperationalStateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestgetDataEncodings(::grpc::ServerContext* context, ::Telemetry::DataEncodingRequest* request, ::grpc::ServerAsyncResponseWriter< ::Telemetry::DataEncodingReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace Telemetry


#endif  // GRPC_agent_2eproto__INCLUDED
