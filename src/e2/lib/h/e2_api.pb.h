// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: e2_api.proto

#ifndef PROTOBUF_e2_5fapi_2eproto__INCLUDED
#define PROTOBUF_e2_5fapi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace E2 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_e2_5fapi_2eproto();
void protobuf_AssignDesc_e2_5fapi_2eproto();
void protobuf_ShutdownFile_e2_5fapi_2eproto();

class ConfigurationReply;
class FabricAdjacency;
class FabricAdjacencyList;
class NetworkElement;
class NetworkElementList;
class NetworkElementOpState;
class NetworkElementOpStateList;
class NetworkElementProperty;
class ServiceBinding;
class ServiceEndpoint;
class ServiceEndpointList;
class ServicePhysicalEndpoint;
class ServicePhysicalEndpointList;

enum NetworkElementType {
  ACCESS_NODE = 0,
  SERVICE_NODE = 1,
  INTERNAL_NODE = 2,
  NetworkElementType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NetworkElementType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NetworkElementType_IsValid(int value);
const NetworkElementType NetworkElementType_MIN = ACCESS_NODE;
const NetworkElementType NetworkElementType_MAX = INTERNAL_NODE;
const int NetworkElementType_ARRAYSIZE = NetworkElementType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetworkElementType_descriptor();
inline const ::std::string& NetworkElementType_Name(NetworkElementType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetworkElementType_descriptor(), value);
}
inline bool NetworkElementType_Parse(
    const ::std::string& name, NetworkElementType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetworkElementType>(
    NetworkElementType_descriptor(), name, value);
}
enum ReturnCode {
  SUCCESS = 0,
  UNKNOWN_ERROR = 1,
  ACTIVATE_ERROR = 2,
  MEMORY_ERROR = 3,
  ELEMENT_NOT_FOUND_ERROR = 4,
  SERVICE_NOT_FOUND_ERROR = 5,
  SERVICE_PLACEMENT_ERROR = 6,
  ReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReturnCode_IsValid(int value);
const ReturnCode ReturnCode_MIN = SUCCESS;
const ReturnCode ReturnCode_MAX = SERVICE_PLACEMENT_ERROR;
const int ReturnCode_ARRAYSIZE = ReturnCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReturnCode_descriptor();
inline const ::std::string& ReturnCode_Name(ReturnCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReturnCode_descriptor(), value);
}
inline bool ReturnCode_Parse(
    const ::std::string& name, ReturnCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReturnCode>(
    ReturnCode_descriptor(), name, value);
}
// ===================================================================

class NetworkElement : public ::google::protobuf::Message {
 public:
  NetworkElement();
  virtual ~NetworkElement();

  NetworkElement(const NetworkElement& from);

  inline NetworkElement& operator=(const NetworkElement& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkElement& default_instance();

  void Swap(NetworkElement* other);

  // implements Message ----------------------------------------------

  inline NetworkElement* New() const { return New(NULL); }

  NetworkElement* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkElement& from);
  void MergeFrom(const NetworkElement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string mgmt_ip = 2;
  void clear_mgmt_ip();
  static const int kMgmtIpFieldNumber = 2;
  const ::std::string& mgmt_ip() const;
  void set_mgmt_ip(const ::std::string& value);
  void set_mgmt_ip(const char* value);
  void set_mgmt_ip(const char* value, size_t size);
  ::std::string* mutable_mgmt_ip();
  ::std::string* release_mgmt_ip();
  void set_allocated_mgmt_ip(::std::string* mgmt_ip);

  // optional .E2.NetworkElementType persona = 3;
  void clear_persona();
  static const int kPersonaFieldNumber = 3;
  ::E2::NetworkElementType persona() const;
  void set_persona(::E2::NetworkElementType value);

  // @@protoc_insertion_point(class_scope:E2.NetworkElement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr mgmt_ip_;
  int persona_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static NetworkElement* default_instance_;
};
// -------------------------------------------------------------------

class NetworkElementList : public ::google::protobuf::Message {
 public:
  NetworkElementList();
  virtual ~NetworkElementList();

  NetworkElementList(const NetworkElementList& from);

  inline NetworkElementList& operator=(const NetworkElementList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkElementList& default_instance();

  void Swap(NetworkElementList* other);

  // implements Message ----------------------------------------------

  inline NetworkElementList* New() const { return New(NULL); }

  NetworkElementList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkElementList& from);
  void MergeFrom(const NetworkElementList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkElementList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .E2.NetworkElement list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  const ::E2::NetworkElement& list(int index) const;
  ::E2::NetworkElement* mutable_list(int index);
  ::E2::NetworkElement* add_list();
  ::google::protobuf::RepeatedPtrField< ::E2::NetworkElement >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::E2::NetworkElement >&
      list() const;

  // @@protoc_insertion_point(class_scope:E2.NetworkElementList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::E2::NetworkElement > list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static NetworkElementList* default_instance_;
};
// -------------------------------------------------------------------

class FabricAdjacency : public ::google::protobuf::Message {
 public:
  FabricAdjacency();
  virtual ~FabricAdjacency();

  FabricAdjacency(const FabricAdjacency& from);

  inline FabricAdjacency& operator=(const FabricAdjacency& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FabricAdjacency& default_instance();

  void Swap(FabricAdjacency* other);

  // implements Message ----------------------------------------------

  inline FabricAdjacency* New() const { return New(NULL); }

  FabricAdjacency* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FabricAdjacency& from);
  void MergeFrom(const FabricAdjacency& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FabricAdjacency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string endpoint_1 = 2;
  void clear_endpoint_1();
  static const int kEndpoint1FieldNumber = 2;
  const ::std::string& endpoint_1() const;
  void set_endpoint_1(const ::std::string& value);
  void set_endpoint_1(const char* value);
  void set_endpoint_1(const char* value, size_t size);
  ::std::string* mutable_endpoint_1();
  ::std::string* release_endpoint_1();
  void set_allocated_endpoint_1(::std::string* endpoint_1);

  // optional string endpoint_2 = 3;
  void clear_endpoint_2();
  static const int kEndpoint2FieldNumber = 3;
  const ::std::string& endpoint_2() const;
  void set_endpoint_2(const ::std::string& value);
  void set_endpoint_2(const char* value);
  void set_endpoint_2(const char* value, size_t size);
  ::std::string* mutable_endpoint_2();
  ::std::string* release_endpoint_2();
  void set_allocated_endpoint_2(::std::string* endpoint_2);

  // @@protoc_insertion_point(class_scope:E2.FabricAdjacency)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_1_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_2_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static FabricAdjacency* default_instance_;
};
// -------------------------------------------------------------------

class FabricAdjacencyList : public ::google::protobuf::Message {
 public:
  FabricAdjacencyList();
  virtual ~FabricAdjacencyList();

  FabricAdjacencyList(const FabricAdjacencyList& from);

  inline FabricAdjacencyList& operator=(const FabricAdjacencyList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FabricAdjacencyList& default_instance();

  void Swap(FabricAdjacencyList* other);

  // implements Message ----------------------------------------------

  inline FabricAdjacencyList* New() const { return New(NULL); }

  FabricAdjacencyList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FabricAdjacencyList& from);
  void MergeFrom(const FabricAdjacencyList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FabricAdjacencyList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .E2.FabricAdjacency list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  const ::E2::FabricAdjacency& list(int index) const;
  ::E2::FabricAdjacency* mutable_list(int index);
  ::E2::FabricAdjacency* add_list();
  ::google::protobuf::RepeatedPtrField< ::E2::FabricAdjacency >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::E2::FabricAdjacency >&
      list() const;

  // @@protoc_insertion_point(class_scope:E2.FabricAdjacencyList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::E2::FabricAdjacency > list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static FabricAdjacencyList* default_instance_;
};
// -------------------------------------------------------------------

class NetworkElementOpState : public ::google::protobuf::Message {
 public:
  NetworkElementOpState();
  virtual ~NetworkElementOpState();

  NetworkElementOpState(const NetworkElementOpState& from);

  inline NetworkElementOpState& operator=(const NetworkElementOpState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkElementOpState& default_instance();

  void Swap(NetworkElementOpState* other);

  // implements Message ----------------------------------------------

  inline NetworkElementOpState* New() const { return New(NULL); }

  NetworkElementOpState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkElementOpState& from);
  void MergeFrom(const NetworkElementOpState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkElementOpState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .E2.NetworkElement element = 1;
  bool has_element() const;
  void clear_element();
  static const int kElementFieldNumber = 1;
  const ::E2::NetworkElement& element() const;
  ::E2::NetworkElement* mutable_element();
  ::E2::NetworkElement* release_element();
  void set_allocated_element(::E2::NetworkElement* element);

  // repeated .E2.NetworkElementProperty properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  const ::E2::NetworkElementProperty& properties(int index) const;
  ::E2::NetworkElementProperty* mutable_properties(int index);
  ::E2::NetworkElementProperty* add_properties();
  ::google::protobuf::RepeatedPtrField< ::E2::NetworkElementProperty >*
      mutable_properties();
  const ::google::protobuf::RepeatedPtrField< ::E2::NetworkElementProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:E2.NetworkElementOpState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::E2::NetworkElement* element_;
  ::google::protobuf::RepeatedPtrField< ::E2::NetworkElementProperty > properties_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static NetworkElementOpState* default_instance_;
};
// -------------------------------------------------------------------

class NetworkElementProperty : public ::google::protobuf::Message {
 public:
  NetworkElementProperty();
  virtual ~NetworkElementProperty();

  NetworkElementProperty(const NetworkElementProperty& from);

  inline NetworkElementProperty& operator=(const NetworkElementProperty& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkElementProperty& default_instance();

  enum ValueCase {
    kDoubleValue = 2,
    kIntValue = 3,
    kUintValue = 4,
    kSintValue = 5,
    kBoolValue = 6,
    kStrValue = 7,
    kBytesValue = 8,
    VALUE_NOT_SET = 0,
  };

  void Swap(NetworkElementProperty* other);

  // implements Message ----------------------------------------------

  inline NetworkElementProperty* New() const { return New(NULL); }

  NetworkElementProperty* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkElementProperty& from);
  void MergeFrom(const NetworkElementProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkElementProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double double_value = 2;
  private:
  bool has_double_value() const;
  public:
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 2;
  double double_value() const;
  void set_double_value(double value);

  // optional int64 int_value = 3;
  private:
  bool has_int_value() const;
  public:
  void clear_int_value();
  static const int kIntValueFieldNumber = 3;
  ::google::protobuf::int64 int_value() const;
  void set_int_value(::google::protobuf::int64 value);

  // optional uint64 uint_value = 4;
  private:
  bool has_uint_value() const;
  public:
  void clear_uint_value();
  static const int kUintValueFieldNumber = 4;
  ::google::protobuf::uint64 uint_value() const;
  void set_uint_value(::google::protobuf::uint64 value);

  // optional sint64 sint_value = 5;
  private:
  bool has_sint_value() const;
  public:
  void clear_sint_value();
  static const int kSintValueFieldNumber = 5;
  ::google::protobuf::int64 sint_value() const;
  void set_sint_value(::google::protobuf::int64 value);

  // optional bool bool_value = 6;
  private:
  bool has_bool_value() const;
  public:
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 6;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional string str_value = 7;
  private:
  bool has_str_value() const;
  public:
  void clear_str_value();
  static const int kStrValueFieldNumber = 7;
  const ::std::string& str_value() const;
  void set_str_value(const ::std::string& value);
  void set_str_value(const char* value);
  void set_str_value(const char* value, size_t size);
  ::std::string* mutable_str_value();
  ::std::string* release_str_value();
  void set_allocated_str_value(::std::string* str_value);

  // optional bytes bytes_value = 8;
  private:
  bool has_bytes_value() const;
  public:
  void clear_bytes_value();
  static const int kBytesValueFieldNumber = 8;
  const ::std::string& bytes_value() const;
  void set_bytes_value(const ::std::string& value);
  void set_bytes_value(const char* value);
  void set_bytes_value(const void* value, size_t size);
  ::std::string* mutable_bytes_value();
  ::std::string* release_bytes_value();
  void set_allocated_bytes_value(::std::string* bytes_value);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:E2.NetworkElementProperty)
 private:
  inline void set_has_double_value();
  inline void set_has_int_value();
  inline void set_has_uint_value();
  inline void set_has_sint_value();
  inline void set_has_bool_value();
  inline void set_has_str_value();
  inline void set_has_bytes_value();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    double double_value_;
    ::google::protobuf::int64 int_value_;
    ::google::protobuf::uint64 uint_value_;
    ::google::protobuf::int64 sint_value_;
    bool bool_value_;
    ::google::protobuf::internal::ArenaStringPtr str_value_;
    ::google::protobuf::internal::ArenaStringPtr bytes_value_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static NetworkElementProperty* default_instance_;
};
// -------------------------------------------------------------------

class NetworkElementOpStateList : public ::google::protobuf::Message {
 public:
  NetworkElementOpStateList();
  virtual ~NetworkElementOpStateList();

  NetworkElementOpStateList(const NetworkElementOpStateList& from);

  inline NetworkElementOpStateList& operator=(const NetworkElementOpStateList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkElementOpStateList& default_instance();

  void Swap(NetworkElementOpStateList* other);

  // implements Message ----------------------------------------------

  inline NetworkElementOpStateList* New() const { return New(NULL); }

  NetworkElementOpStateList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkElementOpStateList& from);
  void MergeFrom(const NetworkElementOpStateList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkElementOpStateList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .E2.NetworkElementOpState opstate = 1;
  int opstate_size() const;
  void clear_opstate();
  static const int kOpstateFieldNumber = 1;
  const ::E2::NetworkElementOpState& opstate(int index) const;
  ::E2::NetworkElementOpState* mutable_opstate(int index);
  ::E2::NetworkElementOpState* add_opstate();
  ::google::protobuf::RepeatedPtrField< ::E2::NetworkElementOpState >*
      mutable_opstate();
  const ::google::protobuf::RepeatedPtrField< ::E2::NetworkElementOpState >&
      opstate() const;

  // @@protoc_insertion_point(class_scope:E2.NetworkElementOpStateList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::E2::NetworkElementOpState > opstate_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static NetworkElementOpStateList* default_instance_;
};
// -------------------------------------------------------------------

class ConfigurationReply : public ::google::protobuf::Message {
 public:
  ConfigurationReply();
  virtual ~ConfigurationReply();

  ConfigurationReply(const ConfigurationReply& from);

  inline ConfigurationReply& operator=(const ConfigurationReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigurationReply& default_instance();

  void Swap(ConfigurationReply* other);

  // implements Message ----------------------------------------------

  inline ConfigurationReply* New() const { return New(NULL); }

  ConfigurationReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigurationReply& from);
  void MergeFrom(const ConfigurationReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigurationReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .E2.ReturnCode code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::E2::ReturnCode code() const;
  void set_code(::E2::ReturnCode value);

  // optional string code_str = 2;
  void clear_code_str();
  static const int kCodeStrFieldNumber = 2;
  const ::std::string& code_str() const;
  void set_code_str(const ::std::string& value);
  void set_code_str(const char* value);
  void set_code_str(const char* value, size_t size);
  ::std::string* mutable_code_str();
  ::std::string* release_code_str();
  void set_allocated_code_str(::std::string* code_str);

  // @@protoc_insertion_point(class_scope:E2.ConfigurationReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_str_;
  int code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static ConfigurationReply* default_instance_;
};
// -------------------------------------------------------------------

class ServicePhysicalEndpoint : public ::google::protobuf::Message {
 public:
  ServicePhysicalEndpoint();
  virtual ~ServicePhysicalEndpoint();

  ServicePhysicalEndpoint(const ServicePhysicalEndpoint& from);

  inline ServicePhysicalEndpoint& operator=(const ServicePhysicalEndpoint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServicePhysicalEndpoint& default_instance();

  void Swap(ServicePhysicalEndpoint* other);

  // implements Message ----------------------------------------------

  inline ServicePhysicalEndpoint* New() const { return New(NULL); }

  ServicePhysicalEndpoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServicePhysicalEndpoint& from);
  void MergeFrom(const ServicePhysicalEndpoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServicePhysicalEndpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string element_name = 2;
  void clear_element_name();
  static const int kElementNameFieldNumber = 2;
  const ::std::string& element_name() const;
  void set_element_name(const ::std::string& value);
  void set_element_name(const char* value);
  void set_element_name(const char* value, size_t size);
  ::std::string* mutable_element_name();
  ::std::string* release_element_name();
  void set_allocated_element_name(::std::string* element_name);

  // repeated string port_list = 3;
  int port_list_size() const;
  void clear_port_list();
  static const int kPortListFieldNumber = 3;
  const ::std::string& port_list(int index) const;
  ::std::string* mutable_port_list(int index);
  void set_port_list(int index, const ::std::string& value);
  void set_port_list(int index, const char* value);
  void set_port_list(int index, const char* value, size_t size);
  ::std::string* add_port_list();
  void add_port_list(const ::std::string& value);
  void add_port_list(const char* value);
  void add_port_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& port_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_port_list();

  // @@protoc_insertion_point(class_scope:E2.ServicePhysicalEndpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr element_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> port_list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static ServicePhysicalEndpoint* default_instance_;
};
// -------------------------------------------------------------------

class ServicePhysicalEndpointList : public ::google::protobuf::Message {
 public:
  ServicePhysicalEndpointList();
  virtual ~ServicePhysicalEndpointList();

  ServicePhysicalEndpointList(const ServicePhysicalEndpointList& from);

  inline ServicePhysicalEndpointList& operator=(const ServicePhysicalEndpointList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServicePhysicalEndpointList& default_instance();

  void Swap(ServicePhysicalEndpointList* other);

  // implements Message ----------------------------------------------

  inline ServicePhysicalEndpointList* New() const { return New(NULL); }

  ServicePhysicalEndpointList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServicePhysicalEndpointList& from);
  void MergeFrom(const ServicePhysicalEndpointList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServicePhysicalEndpointList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .E2.ServicePhysicalEndpoint list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  const ::E2::ServicePhysicalEndpoint& list(int index) const;
  ::E2::ServicePhysicalEndpoint* mutable_list(int index);
  ::E2::ServicePhysicalEndpoint* add_list();
  ::google::protobuf::RepeatedPtrField< ::E2::ServicePhysicalEndpoint >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::E2::ServicePhysicalEndpoint >&
      list() const;

  // @@protoc_insertion_point(class_scope:E2.ServicePhysicalEndpointList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::E2::ServicePhysicalEndpoint > list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static ServicePhysicalEndpointList* default_instance_;
};
// -------------------------------------------------------------------

class ServiceEndpoint : public ::google::protobuf::Message {
 public:
  ServiceEndpoint();
  virtual ~ServiceEndpoint();

  ServiceEndpoint(const ServiceEndpoint& from);

  inline ServiceEndpoint& operator=(const ServiceEndpoint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceEndpoint& default_instance();

  void Swap(ServiceEndpoint* other);

  // implements Message ----------------------------------------------

  inline ServiceEndpoint* New() const { return New(NULL); }

  ServiceEndpoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceEndpoint& from);
  void MergeFrom(const ServiceEndpoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceEndpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 vlan_identifier = 2;
  void clear_vlan_identifier();
  static const int kVlanIdentifierFieldNumber = 2;
  ::google::protobuf::uint32 vlan_identifier() const;
  void set_vlan_identifier(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:E2.ServiceEndpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 vlan_identifier_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static ServiceEndpoint* default_instance_;
};
// -------------------------------------------------------------------

class ServiceEndpointList : public ::google::protobuf::Message {
 public:
  ServiceEndpointList();
  virtual ~ServiceEndpointList();

  ServiceEndpointList(const ServiceEndpointList& from);

  inline ServiceEndpointList& operator=(const ServiceEndpointList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceEndpointList& default_instance();

  void Swap(ServiceEndpointList* other);

  // implements Message ----------------------------------------------

  inline ServiceEndpointList* New() const { return New(NULL); }

  ServiceEndpointList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceEndpointList& from);
  void MergeFrom(const ServiceEndpointList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceEndpointList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .E2.ServiceEndpoint list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  const ::E2::ServiceEndpoint& list(int index) const;
  ::E2::ServiceEndpoint* mutable_list(int index);
  ::E2::ServiceEndpoint* add_list();
  ::google::protobuf::RepeatedPtrField< ::E2::ServiceEndpoint >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::E2::ServiceEndpoint >&
      list() const;

  // @@protoc_insertion_point(class_scope:E2.ServiceEndpointList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::E2::ServiceEndpoint > list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static ServiceEndpointList* default_instance_;
};
// -------------------------------------------------------------------

class ServiceBinding : public ::google::protobuf::Message {
 public:
  ServiceBinding();
  virtual ~ServiceBinding();

  ServiceBinding(const ServiceBinding& from);

  inline ServiceBinding& operator=(const ServiceBinding& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceBinding& default_instance();

  void Swap(ServiceBinding* other);

  // implements Message ----------------------------------------------

  inline ServiceBinding* New() const { return New(NULL); }

  ServiceBinding* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceBinding& from);
  void MergeFrom(const ServiceBinding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceBinding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .E2.ServiceEndpoint service = 1;
  bool has_service() const;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::E2::ServiceEndpoint& service() const;
  ::E2::ServiceEndpoint* mutable_service();
  ::E2::ServiceEndpoint* release_service();
  void set_allocated_service(::E2::ServiceEndpoint* service);

  // optional .E2.ServicePhysicalEndpoint access_element = 2;
  bool has_access_element() const;
  void clear_access_element();
  static const int kAccessElementFieldNumber = 2;
  const ::E2::ServicePhysicalEndpoint& access_element() const;
  ::E2::ServicePhysicalEndpoint* mutable_access_element();
  ::E2::ServicePhysicalEndpoint* release_access_element();
  void set_allocated_access_element(::E2::ServicePhysicalEndpoint* access_element);

  // optional .E2.NetworkElementList edge_element_list = 3;
  bool has_edge_element_list() const;
  void clear_edge_element_list();
  static const int kEdgeElementListFieldNumber = 3;
  const ::E2::NetworkElementList& edge_element_list() const;
  ::E2::NetworkElementList* mutable_edge_element_list();
  ::E2::NetworkElementList* release_edge_element_list();
  void set_allocated_edge_element_list(::E2::NetworkElementList* edge_element_list);

  // @@protoc_insertion_point(class_scope:E2.ServiceBinding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::E2::ServiceEndpoint* service_;
  ::E2::ServicePhysicalEndpoint* access_element_;
  ::E2::NetworkElementList* edge_element_list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_e2_5fapi_2eproto();
  friend void protobuf_AssignDesc_e2_5fapi_2eproto();
  friend void protobuf_ShutdownFile_e2_5fapi_2eproto();

  void InitAsDefaultInstance();
  static ServiceBinding* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkElement

// optional string name = 1;
inline void NetworkElement::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkElement::name() const {
  // @@protoc_insertion_point(field_get:E2.NetworkElement.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkElement::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E2.NetworkElement.name)
}
inline void NetworkElement::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E2.NetworkElement.name)
}
inline void NetworkElement::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E2.NetworkElement.name)
}
inline ::std::string* NetworkElement::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:E2.NetworkElement.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkElement::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkElement::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:E2.NetworkElement.name)
}

// optional string mgmt_ip = 2;
inline void NetworkElement::clear_mgmt_ip() {
  mgmt_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkElement::mgmt_ip() const {
  // @@protoc_insertion_point(field_get:E2.NetworkElement.mgmt_ip)
  return mgmt_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkElement::set_mgmt_ip(const ::std::string& value) {
  
  mgmt_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E2.NetworkElement.mgmt_ip)
}
inline void NetworkElement::set_mgmt_ip(const char* value) {
  
  mgmt_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E2.NetworkElement.mgmt_ip)
}
inline void NetworkElement::set_mgmt_ip(const char* value, size_t size) {
  
  mgmt_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E2.NetworkElement.mgmt_ip)
}
inline ::std::string* NetworkElement::mutable_mgmt_ip() {
  
  // @@protoc_insertion_point(field_mutable:E2.NetworkElement.mgmt_ip)
  return mgmt_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkElement::release_mgmt_ip() {
  
  return mgmt_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkElement::set_allocated_mgmt_ip(::std::string* mgmt_ip) {
  if (mgmt_ip != NULL) {
    
  } else {
    
  }
  mgmt_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mgmt_ip);
  // @@protoc_insertion_point(field_set_allocated:E2.NetworkElement.mgmt_ip)
}

// optional .E2.NetworkElementType persona = 3;
inline void NetworkElement::clear_persona() {
  persona_ = 0;
}
inline ::E2::NetworkElementType NetworkElement::persona() const {
  // @@protoc_insertion_point(field_get:E2.NetworkElement.persona)
  return static_cast< ::E2::NetworkElementType >(persona_);
}
inline void NetworkElement::set_persona(::E2::NetworkElementType value) {
  
  persona_ = value;
  // @@protoc_insertion_point(field_set:E2.NetworkElement.persona)
}

// -------------------------------------------------------------------

// NetworkElementList

// repeated .E2.NetworkElement list = 1;
inline int NetworkElementList::list_size() const {
  return list_.size();
}
inline void NetworkElementList::clear_list() {
  list_.Clear();
}
inline const ::E2::NetworkElement& NetworkElementList::list(int index) const {
  // @@protoc_insertion_point(field_get:E2.NetworkElementList.list)
  return list_.Get(index);
}
inline ::E2::NetworkElement* NetworkElementList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:E2.NetworkElementList.list)
  return list_.Mutable(index);
}
inline ::E2::NetworkElement* NetworkElementList::add_list() {
  // @@protoc_insertion_point(field_add:E2.NetworkElementList.list)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::E2::NetworkElement >*
NetworkElementList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:E2.NetworkElementList.list)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::E2::NetworkElement >&
NetworkElementList::list() const {
  // @@protoc_insertion_point(field_list:E2.NetworkElementList.list)
  return list_;
}

// -------------------------------------------------------------------

// FabricAdjacency

// optional string name = 1;
inline void FabricAdjacency::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FabricAdjacency::name() const {
  // @@protoc_insertion_point(field_get:E2.FabricAdjacency.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FabricAdjacency::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E2.FabricAdjacency.name)
}
inline void FabricAdjacency::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E2.FabricAdjacency.name)
}
inline void FabricAdjacency::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E2.FabricAdjacency.name)
}
inline ::std::string* FabricAdjacency::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:E2.FabricAdjacency.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FabricAdjacency::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FabricAdjacency::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:E2.FabricAdjacency.name)
}

// optional string endpoint_1 = 2;
inline void FabricAdjacency::clear_endpoint_1() {
  endpoint_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FabricAdjacency::endpoint_1() const {
  // @@protoc_insertion_point(field_get:E2.FabricAdjacency.endpoint_1)
  return endpoint_1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FabricAdjacency::set_endpoint_1(const ::std::string& value) {
  
  endpoint_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E2.FabricAdjacency.endpoint_1)
}
inline void FabricAdjacency::set_endpoint_1(const char* value) {
  
  endpoint_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E2.FabricAdjacency.endpoint_1)
}
inline void FabricAdjacency::set_endpoint_1(const char* value, size_t size) {
  
  endpoint_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E2.FabricAdjacency.endpoint_1)
}
inline ::std::string* FabricAdjacency::mutable_endpoint_1() {
  
  // @@protoc_insertion_point(field_mutable:E2.FabricAdjacency.endpoint_1)
  return endpoint_1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FabricAdjacency::release_endpoint_1() {
  
  return endpoint_1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FabricAdjacency::set_allocated_endpoint_1(::std::string* endpoint_1) {
  if (endpoint_1 != NULL) {
    
  } else {
    
  }
  endpoint_1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint_1);
  // @@protoc_insertion_point(field_set_allocated:E2.FabricAdjacency.endpoint_1)
}

// optional string endpoint_2 = 3;
inline void FabricAdjacency::clear_endpoint_2() {
  endpoint_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FabricAdjacency::endpoint_2() const {
  // @@protoc_insertion_point(field_get:E2.FabricAdjacency.endpoint_2)
  return endpoint_2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FabricAdjacency::set_endpoint_2(const ::std::string& value) {
  
  endpoint_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E2.FabricAdjacency.endpoint_2)
}
inline void FabricAdjacency::set_endpoint_2(const char* value) {
  
  endpoint_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E2.FabricAdjacency.endpoint_2)
}
inline void FabricAdjacency::set_endpoint_2(const char* value, size_t size) {
  
  endpoint_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E2.FabricAdjacency.endpoint_2)
}
inline ::std::string* FabricAdjacency::mutable_endpoint_2() {
  
  // @@protoc_insertion_point(field_mutable:E2.FabricAdjacency.endpoint_2)
  return endpoint_2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FabricAdjacency::release_endpoint_2() {
  
  return endpoint_2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FabricAdjacency::set_allocated_endpoint_2(::std::string* endpoint_2) {
  if (endpoint_2 != NULL) {
    
  } else {
    
  }
  endpoint_2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint_2);
  // @@protoc_insertion_point(field_set_allocated:E2.FabricAdjacency.endpoint_2)
}

// -------------------------------------------------------------------

// FabricAdjacencyList

// repeated .E2.FabricAdjacency list = 1;
inline int FabricAdjacencyList::list_size() const {
  return list_.size();
}
inline void FabricAdjacencyList::clear_list() {
  list_.Clear();
}
inline const ::E2::FabricAdjacency& FabricAdjacencyList::list(int index) const {
  // @@protoc_insertion_point(field_get:E2.FabricAdjacencyList.list)
  return list_.Get(index);
}
inline ::E2::FabricAdjacency* FabricAdjacencyList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:E2.FabricAdjacencyList.list)
  return list_.Mutable(index);
}
inline ::E2::FabricAdjacency* FabricAdjacencyList::add_list() {
  // @@protoc_insertion_point(field_add:E2.FabricAdjacencyList.list)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::E2::FabricAdjacency >*
FabricAdjacencyList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:E2.FabricAdjacencyList.list)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::E2::FabricAdjacency >&
FabricAdjacencyList::list() const {
  // @@protoc_insertion_point(field_list:E2.FabricAdjacencyList.list)
  return list_;
}

// -------------------------------------------------------------------

// NetworkElementOpState

// optional .E2.NetworkElement element = 1;
inline bool NetworkElementOpState::has_element() const {
  return !_is_default_instance_ && element_ != NULL;
}
inline void NetworkElementOpState::clear_element() {
  if (GetArenaNoVirtual() == NULL && element_ != NULL) delete element_;
  element_ = NULL;
}
inline const ::E2::NetworkElement& NetworkElementOpState::element() const {
  // @@protoc_insertion_point(field_get:E2.NetworkElementOpState.element)
  return element_ != NULL ? *element_ : *default_instance_->element_;
}
inline ::E2::NetworkElement* NetworkElementOpState::mutable_element() {
  
  if (element_ == NULL) {
    element_ = new ::E2::NetworkElement;
  }
  // @@protoc_insertion_point(field_mutable:E2.NetworkElementOpState.element)
  return element_;
}
inline ::E2::NetworkElement* NetworkElementOpState::release_element() {
  
  ::E2::NetworkElement* temp = element_;
  element_ = NULL;
  return temp;
}
inline void NetworkElementOpState::set_allocated_element(::E2::NetworkElement* element) {
  delete element_;
  element_ = element;
  if (element) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:E2.NetworkElementOpState.element)
}

// repeated .E2.NetworkElementProperty properties = 2;
inline int NetworkElementOpState::properties_size() const {
  return properties_.size();
}
inline void NetworkElementOpState::clear_properties() {
  properties_.Clear();
}
inline const ::E2::NetworkElementProperty& NetworkElementOpState::properties(int index) const {
  // @@protoc_insertion_point(field_get:E2.NetworkElementOpState.properties)
  return properties_.Get(index);
}
inline ::E2::NetworkElementProperty* NetworkElementOpState::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:E2.NetworkElementOpState.properties)
  return properties_.Mutable(index);
}
inline ::E2::NetworkElementProperty* NetworkElementOpState::add_properties() {
  // @@protoc_insertion_point(field_add:E2.NetworkElementOpState.properties)
  return properties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::E2::NetworkElementProperty >*
NetworkElementOpState::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:E2.NetworkElementOpState.properties)
  return &properties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::E2::NetworkElementProperty >&
NetworkElementOpState::properties() const {
  // @@protoc_insertion_point(field_list:E2.NetworkElementOpState.properties)
  return properties_;
}

// -------------------------------------------------------------------

// NetworkElementProperty

// optional string name = 1;
inline void NetworkElementProperty::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkElementProperty::name() const {
  // @@protoc_insertion_point(field_get:E2.NetworkElementProperty.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkElementProperty::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E2.NetworkElementProperty.name)
}
inline void NetworkElementProperty::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E2.NetworkElementProperty.name)
}
inline void NetworkElementProperty::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E2.NetworkElementProperty.name)
}
inline ::std::string* NetworkElementProperty::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:E2.NetworkElementProperty.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkElementProperty::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkElementProperty::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:E2.NetworkElementProperty.name)
}

// optional double double_value = 2;
inline bool NetworkElementProperty::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void NetworkElementProperty::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void NetworkElementProperty::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double NetworkElementProperty::double_value() const {
  // @@protoc_insertion_point(field_get:E2.NetworkElementProperty.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void NetworkElementProperty::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:E2.NetworkElementProperty.double_value)
}

// optional int64 int_value = 3;
inline bool NetworkElementProperty::has_int_value() const {
  return value_case() == kIntValue;
}
inline void NetworkElementProperty::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void NetworkElementProperty::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 NetworkElementProperty::int_value() const {
  // @@protoc_insertion_point(field_get:E2.NetworkElementProperty.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void NetworkElementProperty::set_int_value(::google::protobuf::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:E2.NetworkElementProperty.int_value)
}

// optional uint64 uint_value = 4;
inline bool NetworkElementProperty::has_uint_value() const {
  return value_case() == kUintValue;
}
inline void NetworkElementProperty::set_has_uint_value() {
  _oneof_case_[0] = kUintValue;
}
inline void NetworkElementProperty::clear_uint_value() {
  if (has_uint_value()) {
    value_.uint_value_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::uint64 NetworkElementProperty::uint_value() const {
  // @@protoc_insertion_point(field_get:E2.NetworkElementProperty.uint_value)
  if (has_uint_value()) {
    return value_.uint_value_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void NetworkElementProperty::set_uint_value(::google::protobuf::uint64 value) {
  if (!has_uint_value()) {
    clear_value();
    set_has_uint_value();
  }
  value_.uint_value_ = value;
  // @@protoc_insertion_point(field_set:E2.NetworkElementProperty.uint_value)
}

// optional sint64 sint_value = 5;
inline bool NetworkElementProperty::has_sint_value() const {
  return value_case() == kSintValue;
}
inline void NetworkElementProperty::set_has_sint_value() {
  _oneof_case_[0] = kSintValue;
}
inline void NetworkElementProperty::clear_sint_value() {
  if (has_sint_value()) {
    value_.sint_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 NetworkElementProperty::sint_value() const {
  // @@protoc_insertion_point(field_get:E2.NetworkElementProperty.sint_value)
  if (has_sint_value()) {
    return value_.sint_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void NetworkElementProperty::set_sint_value(::google::protobuf::int64 value) {
  if (!has_sint_value()) {
    clear_value();
    set_has_sint_value();
  }
  value_.sint_value_ = value;
  // @@protoc_insertion_point(field_set:E2.NetworkElementProperty.sint_value)
}

// optional bool bool_value = 6;
inline bool NetworkElementProperty::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void NetworkElementProperty::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void NetworkElementProperty::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool NetworkElementProperty::bool_value() const {
  // @@protoc_insertion_point(field_get:E2.NetworkElementProperty.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void NetworkElementProperty::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:E2.NetworkElementProperty.bool_value)
}

// optional string str_value = 7;
inline bool NetworkElementProperty::has_str_value() const {
  return value_case() == kStrValue;
}
inline void NetworkElementProperty::set_has_str_value() {
  _oneof_case_[0] = kStrValue;
}
inline void NetworkElementProperty::clear_str_value() {
  if (has_str_value()) {
    value_.str_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& NetworkElementProperty::str_value() const {
  // @@protoc_insertion_point(field_get:E2.NetworkElementProperty.str_value)
  if (has_str_value()) {
    return value_.str_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void NetworkElementProperty::set_str_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:E2.NetworkElementProperty.str_value)
  if (!has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E2.NetworkElementProperty.str_value)
}
inline void NetworkElementProperty::set_str_value(const char* value) {
  if (!has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E2.NetworkElementProperty.str_value)
}
inline void NetworkElementProperty::set_str_value(const char* value, size_t size) {
  if (!has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E2.NetworkElementProperty.str_value)
}
inline ::std::string* NetworkElementProperty::mutable_str_value() {
  if (!has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:E2.NetworkElementProperty.str_value)
  return value_.str_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkElementProperty::release_str_value() {
  if (has_str_value()) {
    clear_has_value();
    return value_.str_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void NetworkElementProperty::set_allocated_str_value(::std::string* str_value) {
  if (!has_str_value()) {
    value_.str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (str_value != NULL) {
    set_has_str_value();
    value_.str_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        str_value);
  }
  // @@protoc_insertion_point(field_set_allocated:E2.NetworkElementProperty.str_value)
}

// optional bytes bytes_value = 8;
inline bool NetworkElementProperty::has_bytes_value() const {
  return value_case() == kBytesValue;
}
inline void NetworkElementProperty::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void NetworkElementProperty::clear_bytes_value() {
  if (has_bytes_value()) {
    value_.bytes_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& NetworkElementProperty::bytes_value() const {
  // @@protoc_insertion_point(field_get:E2.NetworkElementProperty.bytes_value)
  if (has_bytes_value()) {
    return value_.bytes_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void NetworkElementProperty::set_bytes_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:E2.NetworkElementProperty.bytes_value)
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E2.NetworkElementProperty.bytes_value)
}
inline void NetworkElementProperty::set_bytes_value(const char* value) {
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E2.NetworkElementProperty.bytes_value)
}
inline void NetworkElementProperty::set_bytes_value(const void* value, size_t size) {
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E2.NetworkElementProperty.bytes_value)
}
inline ::std::string* NetworkElementProperty::mutable_bytes_value() {
  if (!has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:E2.NetworkElementProperty.bytes_value)
  return value_.bytes_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkElementProperty::release_bytes_value() {
  if (has_bytes_value()) {
    clear_has_value();
    return value_.bytes_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void NetworkElementProperty::set_allocated_bytes_value(::std::string* bytes_value) {
  if (!has_bytes_value()) {
    value_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (bytes_value != NULL) {
    set_has_bytes_value();
    value_.bytes_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        bytes_value);
  }
  // @@protoc_insertion_point(field_set_allocated:E2.NetworkElementProperty.bytes_value)
}

inline bool NetworkElementProperty::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void NetworkElementProperty::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline NetworkElementProperty::ValueCase NetworkElementProperty::value_case() const {
  return NetworkElementProperty::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NetworkElementOpStateList

// repeated .E2.NetworkElementOpState opstate = 1;
inline int NetworkElementOpStateList::opstate_size() const {
  return opstate_.size();
}
inline void NetworkElementOpStateList::clear_opstate() {
  opstate_.Clear();
}
inline const ::E2::NetworkElementOpState& NetworkElementOpStateList::opstate(int index) const {
  // @@protoc_insertion_point(field_get:E2.NetworkElementOpStateList.opstate)
  return opstate_.Get(index);
}
inline ::E2::NetworkElementOpState* NetworkElementOpStateList::mutable_opstate(int index) {
  // @@protoc_insertion_point(field_mutable:E2.NetworkElementOpStateList.opstate)
  return opstate_.Mutable(index);
}
inline ::E2::NetworkElementOpState* NetworkElementOpStateList::add_opstate() {
  // @@protoc_insertion_point(field_add:E2.NetworkElementOpStateList.opstate)
  return opstate_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::E2::NetworkElementOpState >*
NetworkElementOpStateList::mutable_opstate() {
  // @@protoc_insertion_point(field_mutable_list:E2.NetworkElementOpStateList.opstate)
  return &opstate_;
}
inline const ::google::protobuf::RepeatedPtrField< ::E2::NetworkElementOpState >&
NetworkElementOpStateList::opstate() const {
  // @@protoc_insertion_point(field_list:E2.NetworkElementOpStateList.opstate)
  return opstate_;
}

// -------------------------------------------------------------------

// ConfigurationReply

// optional .E2.ReturnCode code = 1;
inline void ConfigurationReply::clear_code() {
  code_ = 0;
}
inline ::E2::ReturnCode ConfigurationReply::code() const {
  // @@protoc_insertion_point(field_get:E2.ConfigurationReply.code)
  return static_cast< ::E2::ReturnCode >(code_);
}
inline void ConfigurationReply::set_code(::E2::ReturnCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:E2.ConfigurationReply.code)
}

// optional string code_str = 2;
inline void ConfigurationReply::clear_code_str() {
  code_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigurationReply::code_str() const {
  // @@protoc_insertion_point(field_get:E2.ConfigurationReply.code_str)
  return code_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigurationReply::set_code_str(const ::std::string& value) {
  
  code_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E2.ConfigurationReply.code_str)
}
inline void ConfigurationReply::set_code_str(const char* value) {
  
  code_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E2.ConfigurationReply.code_str)
}
inline void ConfigurationReply::set_code_str(const char* value, size_t size) {
  
  code_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E2.ConfigurationReply.code_str)
}
inline ::std::string* ConfigurationReply::mutable_code_str() {
  
  // @@protoc_insertion_point(field_mutable:E2.ConfigurationReply.code_str)
  return code_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigurationReply::release_code_str() {
  
  return code_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigurationReply::set_allocated_code_str(::std::string* code_str) {
  if (code_str != NULL) {
    
  } else {
    
  }
  code_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code_str);
  // @@protoc_insertion_point(field_set_allocated:E2.ConfigurationReply.code_str)
}

// -------------------------------------------------------------------

// ServicePhysicalEndpoint

// optional string name = 1;
inline void ServicePhysicalEndpoint::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServicePhysicalEndpoint::name() const {
  // @@protoc_insertion_point(field_get:E2.ServicePhysicalEndpoint.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServicePhysicalEndpoint::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E2.ServicePhysicalEndpoint.name)
}
inline void ServicePhysicalEndpoint::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E2.ServicePhysicalEndpoint.name)
}
inline void ServicePhysicalEndpoint::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E2.ServicePhysicalEndpoint.name)
}
inline ::std::string* ServicePhysicalEndpoint::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:E2.ServicePhysicalEndpoint.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServicePhysicalEndpoint::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServicePhysicalEndpoint::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:E2.ServicePhysicalEndpoint.name)
}

// optional string element_name = 2;
inline void ServicePhysicalEndpoint::clear_element_name() {
  element_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServicePhysicalEndpoint::element_name() const {
  // @@protoc_insertion_point(field_get:E2.ServicePhysicalEndpoint.element_name)
  return element_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServicePhysicalEndpoint::set_element_name(const ::std::string& value) {
  
  element_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E2.ServicePhysicalEndpoint.element_name)
}
inline void ServicePhysicalEndpoint::set_element_name(const char* value) {
  
  element_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E2.ServicePhysicalEndpoint.element_name)
}
inline void ServicePhysicalEndpoint::set_element_name(const char* value, size_t size) {
  
  element_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E2.ServicePhysicalEndpoint.element_name)
}
inline ::std::string* ServicePhysicalEndpoint::mutable_element_name() {
  
  // @@protoc_insertion_point(field_mutable:E2.ServicePhysicalEndpoint.element_name)
  return element_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServicePhysicalEndpoint::release_element_name() {
  
  return element_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServicePhysicalEndpoint::set_allocated_element_name(::std::string* element_name) {
  if (element_name != NULL) {
    
  } else {
    
  }
  element_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), element_name);
  // @@protoc_insertion_point(field_set_allocated:E2.ServicePhysicalEndpoint.element_name)
}

// repeated string port_list = 3;
inline int ServicePhysicalEndpoint::port_list_size() const {
  return port_list_.size();
}
inline void ServicePhysicalEndpoint::clear_port_list() {
  port_list_.Clear();
}
inline const ::std::string& ServicePhysicalEndpoint::port_list(int index) const {
  // @@protoc_insertion_point(field_get:E2.ServicePhysicalEndpoint.port_list)
  return port_list_.Get(index);
}
inline ::std::string* ServicePhysicalEndpoint::mutable_port_list(int index) {
  // @@protoc_insertion_point(field_mutable:E2.ServicePhysicalEndpoint.port_list)
  return port_list_.Mutable(index);
}
inline void ServicePhysicalEndpoint::set_port_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:E2.ServicePhysicalEndpoint.port_list)
  port_list_.Mutable(index)->assign(value);
}
inline void ServicePhysicalEndpoint::set_port_list(int index, const char* value) {
  port_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:E2.ServicePhysicalEndpoint.port_list)
}
inline void ServicePhysicalEndpoint::set_port_list(int index, const char* value, size_t size) {
  port_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:E2.ServicePhysicalEndpoint.port_list)
}
inline ::std::string* ServicePhysicalEndpoint::add_port_list() {
  return port_list_.Add();
}
inline void ServicePhysicalEndpoint::add_port_list(const ::std::string& value) {
  port_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:E2.ServicePhysicalEndpoint.port_list)
}
inline void ServicePhysicalEndpoint::add_port_list(const char* value) {
  port_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:E2.ServicePhysicalEndpoint.port_list)
}
inline void ServicePhysicalEndpoint::add_port_list(const char* value, size_t size) {
  port_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:E2.ServicePhysicalEndpoint.port_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServicePhysicalEndpoint::port_list() const {
  // @@protoc_insertion_point(field_list:E2.ServicePhysicalEndpoint.port_list)
  return port_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServicePhysicalEndpoint::mutable_port_list() {
  // @@protoc_insertion_point(field_mutable_list:E2.ServicePhysicalEndpoint.port_list)
  return &port_list_;
}

// -------------------------------------------------------------------

// ServicePhysicalEndpointList

// repeated .E2.ServicePhysicalEndpoint list = 1;
inline int ServicePhysicalEndpointList::list_size() const {
  return list_.size();
}
inline void ServicePhysicalEndpointList::clear_list() {
  list_.Clear();
}
inline const ::E2::ServicePhysicalEndpoint& ServicePhysicalEndpointList::list(int index) const {
  // @@protoc_insertion_point(field_get:E2.ServicePhysicalEndpointList.list)
  return list_.Get(index);
}
inline ::E2::ServicePhysicalEndpoint* ServicePhysicalEndpointList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:E2.ServicePhysicalEndpointList.list)
  return list_.Mutable(index);
}
inline ::E2::ServicePhysicalEndpoint* ServicePhysicalEndpointList::add_list() {
  // @@protoc_insertion_point(field_add:E2.ServicePhysicalEndpointList.list)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::E2::ServicePhysicalEndpoint >*
ServicePhysicalEndpointList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:E2.ServicePhysicalEndpointList.list)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::E2::ServicePhysicalEndpoint >&
ServicePhysicalEndpointList::list() const {
  // @@protoc_insertion_point(field_list:E2.ServicePhysicalEndpointList.list)
  return list_;
}

// -------------------------------------------------------------------

// ServiceEndpoint

// optional string name = 1;
inline void ServiceEndpoint::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceEndpoint::name() const {
  // @@protoc_insertion_point(field_get:E2.ServiceEndpoint.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceEndpoint::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E2.ServiceEndpoint.name)
}
inline void ServiceEndpoint::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E2.ServiceEndpoint.name)
}
inline void ServiceEndpoint::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E2.ServiceEndpoint.name)
}
inline ::std::string* ServiceEndpoint::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:E2.ServiceEndpoint.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceEndpoint::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceEndpoint::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:E2.ServiceEndpoint.name)
}

// optional uint32 vlan_identifier = 2;
inline void ServiceEndpoint::clear_vlan_identifier() {
  vlan_identifier_ = 0u;
}
inline ::google::protobuf::uint32 ServiceEndpoint::vlan_identifier() const {
  // @@protoc_insertion_point(field_get:E2.ServiceEndpoint.vlan_identifier)
  return vlan_identifier_;
}
inline void ServiceEndpoint::set_vlan_identifier(::google::protobuf::uint32 value) {
  
  vlan_identifier_ = value;
  // @@protoc_insertion_point(field_set:E2.ServiceEndpoint.vlan_identifier)
}

// -------------------------------------------------------------------

// ServiceEndpointList

// repeated .E2.ServiceEndpoint list = 1;
inline int ServiceEndpointList::list_size() const {
  return list_.size();
}
inline void ServiceEndpointList::clear_list() {
  list_.Clear();
}
inline const ::E2::ServiceEndpoint& ServiceEndpointList::list(int index) const {
  // @@protoc_insertion_point(field_get:E2.ServiceEndpointList.list)
  return list_.Get(index);
}
inline ::E2::ServiceEndpoint* ServiceEndpointList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:E2.ServiceEndpointList.list)
  return list_.Mutable(index);
}
inline ::E2::ServiceEndpoint* ServiceEndpointList::add_list() {
  // @@protoc_insertion_point(field_add:E2.ServiceEndpointList.list)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::E2::ServiceEndpoint >*
ServiceEndpointList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:E2.ServiceEndpointList.list)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::E2::ServiceEndpoint >&
ServiceEndpointList::list() const {
  // @@protoc_insertion_point(field_list:E2.ServiceEndpointList.list)
  return list_;
}

// -------------------------------------------------------------------

// ServiceBinding

// optional .E2.ServiceEndpoint service = 1;
inline bool ServiceBinding::has_service() const {
  return !_is_default_instance_ && service_ != NULL;
}
inline void ServiceBinding::clear_service() {
  if (GetArenaNoVirtual() == NULL && service_ != NULL) delete service_;
  service_ = NULL;
}
inline const ::E2::ServiceEndpoint& ServiceBinding::service() const {
  // @@protoc_insertion_point(field_get:E2.ServiceBinding.service)
  return service_ != NULL ? *service_ : *default_instance_->service_;
}
inline ::E2::ServiceEndpoint* ServiceBinding::mutable_service() {
  
  if (service_ == NULL) {
    service_ = new ::E2::ServiceEndpoint;
  }
  // @@protoc_insertion_point(field_mutable:E2.ServiceBinding.service)
  return service_;
}
inline ::E2::ServiceEndpoint* ServiceBinding::release_service() {
  
  ::E2::ServiceEndpoint* temp = service_;
  service_ = NULL;
  return temp;
}
inline void ServiceBinding::set_allocated_service(::E2::ServiceEndpoint* service) {
  delete service_;
  service_ = service;
  if (service) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:E2.ServiceBinding.service)
}

// optional .E2.ServicePhysicalEndpoint access_element = 2;
inline bool ServiceBinding::has_access_element() const {
  return !_is_default_instance_ && access_element_ != NULL;
}
inline void ServiceBinding::clear_access_element() {
  if (GetArenaNoVirtual() == NULL && access_element_ != NULL) delete access_element_;
  access_element_ = NULL;
}
inline const ::E2::ServicePhysicalEndpoint& ServiceBinding::access_element() const {
  // @@protoc_insertion_point(field_get:E2.ServiceBinding.access_element)
  return access_element_ != NULL ? *access_element_ : *default_instance_->access_element_;
}
inline ::E2::ServicePhysicalEndpoint* ServiceBinding::mutable_access_element() {
  
  if (access_element_ == NULL) {
    access_element_ = new ::E2::ServicePhysicalEndpoint;
  }
  // @@protoc_insertion_point(field_mutable:E2.ServiceBinding.access_element)
  return access_element_;
}
inline ::E2::ServicePhysicalEndpoint* ServiceBinding::release_access_element() {
  
  ::E2::ServicePhysicalEndpoint* temp = access_element_;
  access_element_ = NULL;
  return temp;
}
inline void ServiceBinding::set_allocated_access_element(::E2::ServicePhysicalEndpoint* access_element) {
  delete access_element_;
  access_element_ = access_element;
  if (access_element) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:E2.ServiceBinding.access_element)
}

// optional .E2.NetworkElementList edge_element_list = 3;
inline bool ServiceBinding::has_edge_element_list() const {
  return !_is_default_instance_ && edge_element_list_ != NULL;
}
inline void ServiceBinding::clear_edge_element_list() {
  if (GetArenaNoVirtual() == NULL && edge_element_list_ != NULL) delete edge_element_list_;
  edge_element_list_ = NULL;
}
inline const ::E2::NetworkElementList& ServiceBinding::edge_element_list() const {
  // @@protoc_insertion_point(field_get:E2.ServiceBinding.edge_element_list)
  return edge_element_list_ != NULL ? *edge_element_list_ : *default_instance_->edge_element_list_;
}
inline ::E2::NetworkElementList* ServiceBinding::mutable_edge_element_list() {
  
  if (edge_element_list_ == NULL) {
    edge_element_list_ = new ::E2::NetworkElementList;
  }
  // @@protoc_insertion_point(field_mutable:E2.ServiceBinding.edge_element_list)
  return edge_element_list_;
}
inline ::E2::NetworkElementList* ServiceBinding::release_edge_element_list() {
  
  ::E2::NetworkElementList* temp = edge_element_list_;
  edge_element_list_ = NULL;
  return temp;
}
inline void ServiceBinding::set_allocated_edge_element_list(::E2::NetworkElementList* edge_element_list) {
  delete edge_element_list_;
  edge_element_list_ = edge_element_list;
  if (edge_element_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:E2.ServiceBinding.edge_element_list)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace E2

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::E2::NetworkElementType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E2::NetworkElementType>() {
  return ::E2::NetworkElementType_descriptor();
}
template <> struct is_proto_enum< ::E2::ReturnCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E2::ReturnCode>() {
  return ::E2::ReturnCode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_e2_5fapi_2eproto__INCLUDED
