//
// Copyrights (c) 2016, Juniper Networks, Inc.
// All rights reserved.
//

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

//
// Nitin Kumar          06/06/2016
//
// This file defines the E2 Controller's public interface
//
//
// Version 1.0
//

syntax = "proto3";

package E2;

// Elastic Edge API
service E2 {
    // Add/Remove network elements
    rpc addElement(NetworkElementList)                       returns (ConfigurationReply) {}
    rpc removeElement(NetworkElementList)                    returns (ConfigurationReply) {}
    rpc getElements(NetworkElement)                          returns (NetworkElementOpStateList) {}

    // Add/Remove fabric link that connects elements
    rpc addFabricLink(FabricLinkList)                        returns (ConfigurationReply) {}
    rpc removeFabricLink(FabricLinkList)                     returns (ConfigurationReply) {}

    // Add/Remove a service endpoint (aka a customer)
    rpc addServiceEndpoint(ServiceEndpointList)              returns (ConfigurationReply) {}
    rpc removeServiceEndpoint(ServiceEndpointList)           returns (ConfigurationReply) {}

    // Place a service in the system
    rpc activateService(ServicePlacementRequest)             returns (ConfigurationReply) {}
    rpc deactivateService(ServicePlacementRequest)           returns (ConfigurationReply) {}
}

// A network element. Basic building block of the cluster of network nodes managed
// by E2
message NetworkElement {
    // Name of the device
    string name                = 1;

    // Management IP address of the device
    string mgmt_ip             = 2;

    // Persona of the element
    NetworkElementType persona = 3;
}
message NetworkElementList {
    repeated NetworkElement list                            = 1;
}

// Types of network elements
enum NetworkElementType {
    // Node facing the client
    ACCESS_NODE                                             = 0;

    // Node hosting all the E2 services
    SERVICE_NODE                                            = 1;

    // Internal node that connects all the edges
    INTERNAL_NODE                                           = 2;
}
    
// A point to point adjacency between two edge nodes
message FabricLink {
    string name                                             = 1;
    string endpoint_1                                       = 2;
    string endpoint_2                                       = 3;
}
message FabricLinkList {
    repeated FabricLink list                                = 1;
}

// Operational State for a network element
message NetworkElementOpState {
    NetworkElement       element                            = 1;
    repeated NetworkElementProperty properties              = 2;
}

message NetworkElementProperty {
    string name                                             = 1;

    // One of possible values
    oneof value {
        double double_value                                 =  2;
        int64  int_value                                    =  3;
        uint64 uint_value                                   =  4;
        sint64 sint_value                                   =  5;
        bool   bool_value                                   =  6;
        string str_value                                    =  7;
        bytes  bytes_value                                  =  8;
    } 
}

message NetworkElementOpStateList {
    repeated NetworkElementOpState opstate                  = 1;
}

// Response from the controller
message ConfigurationReply {
    // Return code
    ReturnCode code                                         = 1;

    // Return code string
    string     code_str                                     = 2;
};

// Service Endpoint. This represents an end customer
message ServiceEndpoint {
    // Name of the service
    string     name                                         = 1;
   
    // Type
    uint32     vlan_identifier                              = 2;
};
message ServiceEndpointList {
    repeated ServiceEndpoint list                           = 1;
};

// Request to place a service
message ServicePlacementRequest {
    // List of services to place
    ServiceEndpoint service                                 = 1;

    // Access elements where the service is brought in
    NetworkElement   access_element                         = 2;
    repeated  string access_port_list                       = 3;

    // List of network elements. This list is optional. If not specified
    // then E2 will place the service dynamically
    NetworkElementList  edge_element_list                   = 4;
};

// Result of the operation
enum ReturnCode {
    SUCCESS                                                 = 0;
    UNKNOWN_ERROR                                           = 1;
    ACTIVATE_ERROR                                          = 2;
    MEMORY_ERROR 					    = 3;
    ELEMENT_NOT_FOUND_ERROR                                 = 4;
    SERVICE_NOT_FOUND_ERROR                                 = 5;
    SERVICE_PLACEMENT_ERROR                                 = 6;
}
